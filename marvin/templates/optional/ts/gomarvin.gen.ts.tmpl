{{ $project_info  := .ProjectInfo -}}
{{ $modules       := .Modules -}}
/**
 * @file API client generated by gomarvin, DO NOT EDIT!
 * Rename the current file to edit and save changes!
 * @version {{$project_info.GomarvinVersion}}
 */

/** Api details and params */
export const API = {
  project_name: "{{$project_info.Name}}",
  base_url: "http://localhost:{{$project_info.Port}}",
  api_prefix: "{{$project_info.APIPrefix}}",
  init_headers: {
    "Content-type": "application/json;charset=UTF-8",
  },
  get url() {
    return `${this.base_url}${this.api_prefix}`;
  },
};

/**
 * optional interface used in the fetch request with optional parameters
 * @param {RequestInit} [options]
 * If default fetch options need to be edited, provide a custom options object
 * @param {string} [append_url]
 * extend the url with custom params (like "?name=jim")
 */
interface OptionalFetchParams {
  options?: RequestInit;
  append_url?: string;
}

{{ if $modules }}
  {{- range $module := $modules -}}
    {{- if $module.Endpoints }}
/** Endpoints for the {{ $module.Name }} module */
export const {{ $module.Name }}Endpoints = {
{{- range $endpoint := $module.Endpoints }}
  {{ $endpoint.ControllerName}},{{ end }}
}
    {{ end -}}
  {{ end -}}
{{ end  }}


{{- if $modules -}}
  {{- range $module := $modules -}}
    {{- if $module.Endpoints }}
      {{- range $endpoint := $module.Endpoints }}
        {{- if $endpoint.Body }}
/** Body for the {{$endpoint.ControllerName}} endpoint */
export interface {{$endpoint.ControllerName}}Body  {
  {{- range $body_field := $endpoint.Body }}
  {{ if (eq $body_field.Type  "string" )    -}} {{$body_field.Field}}: string {{ end -}}
  {{- if or  
      ( eq $body_field.Type  "int"     ) 
      ( eq $body_field.Type  "int64"   ) 
      ( eq $body_field.Type  "int32"   ) 
      ( eq $body_field.Type  "int16"   ) 
      ( eq $body_field.Type  "int8"    ) 
      ( eq $body_field.Type  "uint"    ) 
      ( eq $body_field.Type  "uint64"  ) 
      ( eq $body_field.Type  "uint32"  ) 
      ( eq $body_field.Type  "uint16"  ) 
      ( eq $body_field.Type  "uint8"   ) 
      ( eq $body_field.Type  "float64" )
      ( eq $body_field.Type  "float32" )    -}} 
  {{$body_field.Field}}: number {{ end -}}
  {{ if (eq $body_field.Type  "time.Time" )    -}} {{$body_field.Field}}: any {{ end -}}
  {{ if (eq $body_field.Type  "bool"      )    -}} {{$body_field.Field}}: boolean {{ end -}}
  {{ end }}
}
{{ end -}}{{- end -}}{{- end -}}{{ end -}}
{{ end -}}

{{- if $modules -}}
  {{- range $module := $modules -}}
    {{- if $module.Endpoints }}
      {{- range $endpoint := $module.Endpoints }}

/**
 * ## {{$endpoint.Method}} URL{{$endpoint.URL}}{{- range $url_param := $endpoint.URLParams }}/[{{ $url_param.Field}}:{{ $url_param.Type }}]{{- end }}
 * @param {RequestInit} [opt] Optional object with 2 optional values
 *  - `append_url` is a string that can be appended to the predefined url
 *  - `options` is the second fetch() param ( object )
 * @returns {Promise} Promise of the fetch request
 */
export async function {{$endpoint.ControllerName}}(
{{- if $endpoint.URLParams -}}
  {{- range $url_param := $endpoint.URLParams }}
      {{- if (eq $url_param.Type  "string" ) -}} {{$url_param.Field}}: string, {{ end -}}
      {{- if (eq $url_param.Type  "int" )    -}} {{$url_param.Field}}: number, {{ end -}}
  {{- end }}
{{- end -}}
{{- if $endpoint.Body -}} body: {{$endpoint.ControllerName}}Body {{- end -}} 
{{- if $endpoint.Body -}}, opt?: OptionalFetchParams {{ else }}opt?: OptionalFetchParams {{- end -}}
): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${API.url}{{$endpoint.URL}}{{- range $url_param := $endpoint.URLParams }}/${{ WrapInCurlyBraces $url_param.Field}}{{- end }}${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  } else return await fetch(url, {
    method: "{{$endpoint.Method}}",
    headers: API.init_headers,
    {{ if $endpoint.Body -}} body: JSON.stringify(body) {{- end -}}
  });
}
{{- end }}
{{ end -}}
{{ end -}}
{{ end  }}


/**
 * NOTE: function not used currently
 * util function for creating headers. Headers specified in the
 * API object will be sent on each request.
 * @param custom_headers
 * custom object of optional headers, where key and value are strings only
 * @returns {Headers} headers used in the fetch request
 */
export function createHeaders(custom_headers: object, use_default: boolean = true): Headers {
  let headers = new Headers(API.init_headers);

  if (Object.keys(custom_headers).length != 0) {
    for (const [k, v] of Object.entries(custom_headers)) {
      // some weird thing is appended in some cases, so avoid it
      if (k !== "isTrusted") {
        headers.append(k, v);
      }
    }
  }
  return headers;
}
