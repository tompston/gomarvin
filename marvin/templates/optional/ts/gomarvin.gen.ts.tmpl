{{ $project_info  := .ProjectInfo -}}
{{ $modules       := .Modules -}}
/**
 * @file API client generated by gomarvin, DO NOT EDIT!
 * Rename the current file to edit and save changes!
 * @version {{$project_info.GomarvinVersion}}
 */

/** Api details and params */
export const API = {
  project_name: "{{$project_info.Name}}",
  base_url: "http://localhost:{{$project_info.Port}}",
  api_prefix: "{{$project_info.APIPrefix}}",
  init_headers: { "Content-type": "application/json;charset=UTF-8" },
  get url() {
    return `${this.base_url}${this.api_prefix}`;
  }
};

{{ if $modules }}
  {{- range $module := $modules -}}
    {{- if $module.Endpoints }}
/** Endpoints for the {{ $module.Name }} module */
export const {{ $module.Name }}Endpoints = {
{{- range $endpoint := $module.Endpoints }}
  {{ $endpoint.ControllerName}},{{ end }}
}
    {{ end -}}
  {{ end -}}
{{ end  }}


{{- if $modules -}}
  {{- range $module := $modules -}}
    {{- if $module.Endpoints }}
      {{- range $endpoint := $module.Endpoints }}
        {{- if $endpoint.Body }}
/** Body for the {{$endpoint.ControllerName}} endpoint */
export interface {{$endpoint.ControllerName}}Body  {
  {{- range $body_field := $endpoint.Body }}
  {{ if (eq $body_field.Type  "string" )    -}} {{$body_field.Field}}: string {{ end -}}
  {{- if or  
      ( eq $body_field.Type  "int"     ) 
      ( eq $body_field.Type  "int64"   ) 
      ( eq $body_field.Type  "int32"   ) 
      ( eq $body_field.Type  "int16"   ) 
      ( eq $body_field.Type  "int8"    ) 
      ( eq $body_field.Type  "uint"    ) 
      ( eq $body_field.Type  "uint64"  ) 
      ( eq $body_field.Type  "uint32"  ) 
      ( eq $body_field.Type  "uint16"  ) 
      ( eq $body_field.Type  "uint8"   ) 
      ( eq $body_field.Type  "float64" )
      ( eq $body_field.Type  "float32" )    -}} 
  {{$body_field.Field}}: number {{ end -}}
  {{ if (eq $body_field.Type  "time.Time" )    -}} {{$body_field.Field}}: any {{ end -}}
  {{ if (eq $body_field.Type  "bool"      )    -}} {{$body_field.Field}}: boolean {{ end -}}
  {{ end }}
}
{{ end -}}{{- end -}}{{- end -}}{{ end -}}
{{ end -}}

{{- if $modules -}}
  {{- range $module := $modules -}}
    {{- if $module.Endpoints }}
      {{- range $endpoint := $module.Endpoints }}

/**
 * {{$endpoint.Method}} URL{{$endpoint.URL}}{{- range $url_param := $endpoint.URLParams }}/${{ WrapInCurlyBraces $url_param.Field}}:{{ $url_param.Type }}{{- end }}
 * @returns {Promise} Promise of the fetch request
 */
export async function {{$endpoint.ControllerName}}(
{{- if $endpoint.URLParams -}}
  {{- range $url_param := $endpoint.URLParams }}
      {{- if (eq $url_param.Type  "string" ) -}} {{$url_param.Field}}: string, {{ end -}}
      {{- if (eq $url_param.Type  "int" )    -}} {{$url_param.Field}}: number, {{ end -}}
  {{- end }}
{{- end -}}
{{- if $endpoint.Body -}} body: {{$endpoint.ControllerName}}Body {{- end -}}
): Promise<Response> {
  const url = `${API.url}{{$endpoint.URL}}{{- range $url_param := $endpoint.URLParams }}/${{ WrapInCurlyBraces $url_param.Field}}{{- end }}`;
  return await fetch(url, {
    method: "{{$endpoint.Method}}",
    headers: API.init_headers,
    {{ if $endpoint.Body -}} body: JSON.stringify(body) {{- end -}}
  });
}
{{- end }}
{{ end -}}
{{ end -}}
{{ end  }}