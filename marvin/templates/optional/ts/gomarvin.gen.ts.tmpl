{{ $project_info  := .ProjectInfo -}}
{{ $modules       := .Modules     -}}
/**
 * @file API client generated by gomarvin, DO NOT EDIT!
 *
 * Rename the current file if you want to 
 * edit it and save changes.
 *
 * Repo             : https://github.com/tompston/gomarvin
 * Docs             : https://gomarvin.pages.dev/docs
 * Editor           : https://gomarvin.pages.dev
 * project_name     : "{{$project_info.Name}}",
 * config_version   : "{{ $project_info.ConfigVersion}}"
 * gomarvin_version : "{{ ConvertLastCharTo $project_info.GomarvinVersion "x" }}"
 * 
 */

/** The API client used by the fetch function */
export interface Client {
  host_url: string
  api_prefix: string
  headers: HeadersInit
}

/** Default api params */
export const defaultClient : Client = {
  host_url: "http://localhost:{{$project_info.Port}}",
  api_prefix: "{{$project_info.APIPrefix}}",
  headers: {
    "Content-type": "application/json;charset=UTF-8",
  },
}


/**
 * optional interface used in the fetch request with optional parameters
 * @param {RequestInit} [options]
 * If default fetch options need to be edited, provide a custom options object
 * @param {string} [append_url]
 * extend the url with custom params (like "?name=jim")
 * @example
 * // Append an optional url string
 * async function FetchUserById() {
 *  const res = await F.GetUserById(client, 10, { append_url: "?name=jim" });
 *  console.log(res);
 * }
 * // Use a different RequestInit object in the fetch request
 * async function FetchUserById() {
 *  const res = await F.GetUserById(client, 10, { options: { method: "POST" } });
 *  console.log(res);
 * }
 */
export interface OptionalParams {
  options?: RequestInit;
  append_url?: string;
}

{{ if $modules }}
  {{- range $module := $modules -}}
    {{- if $module.Endpoints }}
/** Endpoints for the {{ $module.Name }} module */
export const {{ $module.Name }}Endpoints = {
{{- range $endpoint := $module.Endpoints }}
  {{ $endpoint.ControllerName}},{{ end }}
}
    {{ end -}}
  {{ end -}}
{{ end  }}


{{- if $modules -}}
  {{- range $module := $modules -}}
    {{- if $module.Endpoints }}
      {{- range $endpoint := $module.Endpoints }}
        {{- if $endpoint.Body }}
/**
 * ### Body for the {{$endpoint.ControllerName}} endpoint
 * @interface {{$endpoint.ControllerName}}Body
 * 
 {{- range $body_field := $endpoint.Body }}
 * @field {{$body_field.Field}} `{{$body_field.Validate}}`{{ end }}
 */
export interface {{$endpoint.ControllerName}}Body  {
  {{- range $body_field := $endpoint.Body }}
  {{ if (eq $body_field.Type  "string" )    -}} {{$body_field.Field}}: string {{ end -}}
  {{- if or  
      ( eq $body_field.Type  "int"     ) 
      ( eq $body_field.Type  "int64"   ) 
      ( eq $body_field.Type  "int32"   ) 
      ( eq $body_field.Type  "int16"   ) 
      ( eq $body_field.Type  "int8"    ) 
      ( eq $body_field.Type  "uint"    ) 
      ( eq $body_field.Type  "uint64"  ) 
      ( eq $body_field.Type  "uint32"  ) 
      ( eq $body_field.Type  "uint16"  ) 
      ( eq $body_field.Type  "uint8"   ) 
      ( eq $body_field.Type  "float64" )
      ( eq $body_field.Type  "float32" )    -}} 
  {{$body_field.Field}}: number {{ end -}}
  {{ if (eq $body_field.Type  "time.Time" )    -}} {{$body_field.Field}}: any {{ end -}}
  {{ if (eq $body_field.Type  "bool"      )    -}} {{$body_field.Field}}: boolean {{ end -}}
  {{ end }}
}
{{ end -}}{{- end -}}{{- end -}}{{ end -}}
{{ end -}}

{{- if $modules -}}
  {{- range $module := $modules -}}
    {{- if $module.Endpoints }}
      {{- range $endpoint := $module.Endpoints }}

/**
 * ### {{$endpoint.Method}} URL{{$endpoint.URL}}{{- range $url_param := $endpoint.URLParams }}/[{{ $url_param.Field}}:{{ $url_param.Type }}]{{- end }}
 * Fetch {{$endpoint.ControllerName}} endpoint and return the promise of the response
 * @param {Client} client init settings for the api client (url and headers)
 {{- if $endpoint.Body }}
 * @param {{ WrapInCurlyBracesWithAppendedString $endpoint.ControllerName "Body" }} body check {{$endpoint.ControllerName}}Body interface for validation fields
 {{- end }}
{{- if $endpoint.URLParams }}
{{ range $url_param := $endpoint.URLParams }}
{{- if (eq $url_param.Type  "string" ) }} * @param {{ WrapInCurlyBraces "string"}} {{$url_param.Field}} url param for the endpoint {{ end }}
{{- if (eq $url_param.Type  "int" )    }} * @param {{ WrapInCurlyBraces "number"}} {{$url_param.Field}} url param for the endpoint {{ end }}
{{ end }}{{ end }}
 * @param {OptionalParams} [opt] optional params you can add to the request ( appended_url and custom options )
 * @returns {Promise<Response>} Promise of the fetch request
 */
export async function {{$endpoint.ControllerName}}(client : Client, 
{{- if $endpoint.URLParams -}}
  {{- range $url_param := $endpoint.URLParams }}
      {{- if (eq $url_param.Type  "string" ) -}} {{$url_param.Field}}: string, {{ end -}}
      {{- if (eq $url_param.Type  "int" )    -}} {{$url_param.Field}}: number, {{ end -}}
  {{- end }}
{{- end -}}
{{- if $endpoint.Body -}} body: {{$endpoint.ControllerName}}Body {{- end -}} 
{{- if $endpoint.Body -}}, opt?: OptionalParams {{ else }} opt?: OptionalParams {{- end -}}
): Promise<Response> {
  const appended_url = opt?.append_url ? opt?.append_url : "";
  const url = `${client.host_url}${client.api_prefix}{{$endpoint.URL}}{{- range $url_param := $endpoint.URLParams }}/${{ WrapInCurlyBraces $url_param.Field}}{{- end }}${appended_url}`;
  if (opt?.options) {
    return await fetch(url, opt?.options);
  }
  return await fetch(url, {
    method: "{{$endpoint.Method}}",
    headers: client.headers,
    {{ if $endpoint.Body -}} body: JSON.stringify(body) {{- end -}}
  });
}
      {{- end }}
    {{ end -}}
  {{ end -}}
{{ end  }}
