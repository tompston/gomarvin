{{ $project_info  := .ProjectInfo -}}
{{ $modules       := .Modules     -}}
"""
API client generated by gomarvin, DO NOT EDIT!

Rename the current file if you want to 
edit it and save changes.

Repo             : https://github.com/tompston/gomarvin
Docs             : https://gomarvin.pages.dev/docs
Editor           : https://gomarvin.pages.dev
project_name     : "{{$project_info.Name}}",
config_version   : "{{ $project_info.ConfigVersion}}"
gomarvin_version : "{{ ConvertLastCharTo $project_info.GomarvinVersion "x" }}"

"""

from dataclasses import dataclass
from typing import Dict, Optional
import requests


@dataclass
class Client:
    """
    The API client used by the fetch function.
    """
    host_url: str
    api_prefix: str
    headers: Dict[str, str]


@dataclass
class ApiResponse:
    """
    Interface for the expected response.
    """
    data: any
    message: str
    status: int
    links: Optional[Dict[str, str]] = None


defaultClient = Client(
    host_url="http://localhost:{{$project_info.Port}}",
    api_prefix="{{$project_info.APIPrefix}}",
    headers={
        "Content-type": "application/json;charset=UTF-8",
    }
)


{{- if $modules -}}
  {{- range $module := $modules -}}
    {{- if $module.Endpoints }}
      {{- range $endpoint := $module.Endpoints }}
        {{- if $endpoint.Body }}
@dataclass
class {{ $endpoint.ControllerName }}Body:
    """
    ### Body for the {{$endpoint.ControllerName}} endpoint

    {{ range $body_field := $endpoint.Body -}}
    @field {{$body_field.Field}} `{{$body_field.Validate}}`
    {{ end -}}
    """
  {{- range $body_field := $endpoint.Body }}
  {{ if 
      ( eq $body_field.Type  "string" )    }}  {{ PythonDataclasstField $body_field.Field $body_field.Validate }}: str  {{ end -}}
  {{ if or  
      ( eq $body_field.Type  "int"     ) 
      ( eq $body_field.Type  "int64"   ) 
      ( eq $body_field.Type  "int32"   ) 
      ( eq $body_field.Type  "int16"   ) 
      ( eq $body_field.Type  "int8"    ) 
      ( eq $body_field.Type  "uint"    ) 
      ( eq $body_field.Type  "uint64"  ) 
      ( eq $body_field.Type  "uint32"  ) 
      ( eq $body_field.Type  "uint16"  ) 
      ( eq $body_field.Type  "uint8"   )  }}  {{ PythonDataclasstField $body_field.Field $body_field.Validate }}: int {{ end -}}
  {{ if or  
      ( eq $body_field.Type  "float64" )
      ( eq $body_field.Type  "float32" )  }}  {{ PythonDataclasstField $body_field.Field $body_field.Validate }}: float {{ end -}}
  {{ if 
      ( eq $body_field.Type  "time.Time" ) }}  {{ PythonDataclasstField $body_field.Field $body_field.Validate }}: str {{ end -}}
  {{ if 
      ( eq $body_field.Type  "bool"      ) }}  {{ PythonDataclasstField $body_field.Field $body_field.Validate }}: bool {{ end -}}
  {{ if 
      ( eq $body_field.Type  "any"      )  }}  {{ PythonDataclasstField $body_field.Field $body_field.Validate }}: any {{ end -}}
  {{ end }}
                {{ end -}}
            {{- end -}}
        {{- end -}}
    {{ end -}}
{{ end -}}



{{- if $modules -}}
  {{- range $module := $modules -}}
    {{- if $module.Endpoints }}

class {{ $module.Name }}Endpoints:
    """
    Fetch functions for the {{ $module.Name }} endpoints module
    """

    def __init__(self, client: Client):
        self.client = client
      {{- range $endpoint := $module.Endpoints }}

    def {{ $endpoint.ControllerName }}(self, 
    {{- if $endpoint.URLParams -}}
        {{- range $url_param := $endpoint.URLParams }}
            {{- if (eq $url_param.Type  "string" ) -}} {{$url_param.Field}}: str, {{ end -}}
            {{- if (eq $url_param.Type  "int" )    -}} {{$url_param.Field}}: int, {{ end -}}
        {{- end }}
    {{- end -}}
    {{- if $endpoint.Body -}} body: {{$endpoint.ControllerName}}Body {{- end -}} 
    {{- if $endpoint.Body -}}, options: Optional[Dict[str, any]] = None ,append_url: Optional[str] = None {{ else }} options: Optional[Dict[str, any]] = None ,append_url: Optional[str] = None {{- end -}}) -> requests.Response:
        """
        ### {{$endpoint.Method}} URL{{$endpoint.URL}}{{- range $url_param := $endpoint.URLParams }}/[{{ $url_param.Field}}:{{ $url_param.Type }}]{{- end }}
        
        Fetch {{$endpoint.ControllerName}} endpoint and return the response

         {{- if $endpoint.Body }}
         * @param `body` {{ $endpoint.ControllerName}}Body - see {{$endpoint.ControllerName}}Body class for possible validation fields
        {{- end }}
         * @param `options` Dict[str, any] - optional request options (useful when need to override the default headers)
         * @param `append_url` str - optional url to append to the endpoint url
        {{- if $endpoint.URLParams }}
        {{ range $url_param := $endpoint.URLParams }}
        {{- if (eq $url_param.Type  "string" ) }} * @param {{ WrapInCurlyBraces "string"}} {{$url_param.Field}} url param for the endpoint {{ end }}
        {{- if (eq $url_param.Type  "int" )    }} * @param {{ WrapInCurlyBraces "number"}} {{$url_param.Field}} url param for the endpoint {{ end }}
        {{ end }}{{ end }}
        """
        appended_url = append_url if append_url else ""
        url = f"{self.client.host_url}{self.client.api_prefix}{{ $endpoint.URL }}{{- range $url_param := $endpoint.URLParams }}/{{ WrapInCurlyBraces $url_param.Field }}{{- end }}{appended_url}"
        if options:
            return requests.request(**options, url=url)
        return requests.request("{{$endpoint.Method}}",url, headers=self.client.headers {{- if $endpoint.Body -}}, json=body.__dict__ {{- end -}} )
      {{- end }}
    {{ end -}}
  {{ end -}}
{{ end  }}
