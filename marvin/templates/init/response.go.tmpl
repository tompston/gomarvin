// Package response is used for returning a predictable json object
// to the client. It is used in the controllers of the modules.
// The package also contains predefined error messages.
package response


import (
	{{- if ( eq .ProjectInfo.Framework "gin") }}"github.com/gin-gonic/gin"{{ end }}
	{{- if ( eq .ProjectInfo.Framework "fiber") }}"github.com/gofiber/fiber/v2"{{ end }}
	{{- if ( eq .ProjectInfo.Framework "echo") }}"github.com/labstack/echo/v4"{{ end }}

	{{- if ( eq .ProjectInfo.Framework "chi") }}
	"net/http"
	"encoding/json"
	{{ end }}

	"{{.ProjectInfo.Name}}/pkg/settings"
	"fmt"
)

const (
    ParamIsNotIntMessage 			= "Only integers as URL params allowed!"
    FailedDbConnMessage 			= "Error while calling the database!"
	FailedPayloadValidationMessage 	= "Payload validation failed!"
)

// Baseline Response for the controllers
type Res struct {
	Status  int         `json:"status"`
	Message string      `json:"message"`
	Data    interface{} `json:"data"`
}

// Baseline Response + Pagination links
type ResWithPagination struct {
	Res
	Links PaginationLinks `json:"links,omitempty"`
}

type PaginationLinks struct {
	Prev string `json:"prev,omitempty"`
	Next string `json:"next,omitempty"`
}


// Response is used in the controllers to return an predictable
// json object. There is a 4th optional parameter, which is
// used to send pagination links to the client, if needed.
// 
// All of the correct status codes can be found here:
// https://pkg.go.dev/net/http?utm_source=gopls#StatusOK
{{- if ( eq .ProjectInfo.Framework "gin") }}
func Response(c *gin.Context, status int, data interface{}, message string, links ...PaginationLinks) {

	res := Res{Status: status, Message: message, Data: data}

	if len(links) == 1 {
		c.JSON(status, &ResWithPagination{
			Res:   res,
			Links: links[0],
		})
		return
	}

	c.JSON(status, &res)
}
{{- end }}



{{- if ( eq .ProjectInfo.Framework "fiber") }}
func Response(c *fiber.Ctx, status int,data interface{}, message string, links ...PaginationLinks) error {
	
	res := Res{Status: status, Message: message, Data: data}

	if len(links) == 1 {
		return c.Status(status).JSON(&ResWithPagination{
			Res:   res,
			Links: links[0]})
	}
	
	return c.Status(status).JSON(&res)
}
{{- end }}



{{- if ( eq .ProjectInfo.Framework "echo") }}
func Response(c echo.Context, status int, data interface{}, message string, links ...PaginationLinks) error {

	res := Res{Status: status, Message: message, Data: data}

	if len(links) == 1 {
		return c.JSON(status, &ResWithPagination{
			Res:   res,
			Links: links[0]})
	}

	return c.JSON(status, &res)
}
{{- end }}



{{- if ( eq .ProjectInfo.Framework "chi") }}
func Response(w http.ResponseWriter, status int, data interface{}, message string, links ...PaginationLinks) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)

	res := Res{Status: status, Message: message, Data: data}

	if len(links) == 1 {
		return json.NewEncoder(w).Encode(&ResWithPagination{
			Res:   res,
			Links: links[0]})
	}

	return json.NewEncoder(w).Encode(&res)
}
{{- end }}


// DbErrorMessage return the full error message only during debug. 
// This function can be optionally extended to log the full error.
func DbErrorMessage(err error) string {
	if settings.Environment.Backend.DebugMode {
		return fmt.Sprintln(FailedDbConnMessage, err.Error())
	}
	return fmt.Sprintln(FailedDbConnMessage)
}
