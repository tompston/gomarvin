package response


import (
	{{- if ( eq .ProjectInfo.Framework "gin") }}"github.com/gin-gonic/gin"{{ end }}
	{{- if ( eq .ProjectInfo.Framework "fiber") }}"github.com/gofiber/fiber/v2"{{ end }}
	{{- if ( eq .ProjectInfo.Framework "echo") }}"github.com/labstack/echo/v4"{{ end }}

	{{- if ( eq .ProjectInfo.Framework "chi") }}
	"net/http"
	"encoding/json"
	{{ end }}

	"{{.ProjectInfo.Name}}/settings"
	"fmt"
)

const (
    ParamIsNotIntMessage 			= "Only integers as URL params allowed!"
    FailedDbConnMessage 			= "Error while calling the database!"
	FailedPayloadValidationMessage 	= "Payload validation failed!"
)

type Res struct {
	// Baseline Response
	Status  int         `json:"status"`
	Message string      `json:"message"`
	Data    interface{} `json:"data"`
}

type ResWithPagination struct {
	// Baseline Response + Pagination links
	Res
	Links interface{} `json:"links"`
}

type PaginationLinks struct {
	Prev string `json:"prev,omitempty"`
	Next string `json:"next,omitempty"`
}





// Response is a function that is used in the controllers to 
// return an predictable json object. All of the correct 
// status codes can be found here -> https://pkg.go.dev/net/http?utm_source=gopls#StatusOK
{{- if ( eq .ProjectInfo.Framework "gin") }}
func Response(c *gin.Context, status int, data interface{}, message string) {
	c.JSON(status, &Res{
		Status:  status,
		Message: message,
		Data:    data,
	})
}

func ResponseWithPagination(c *gin.Context, status int, data interface{}, message string, links PaginationLinks) {
	c.JSON(status, &ResWithPagination{
		Res: Res{
			Status:  status,
			Message: message,
			Data:    data,
		},
		Links: PaginationLinks{
			Prev: links.Prev,
			Next: links.Next,
		},
	})
}
{{- end }}







{{- if ( eq .ProjectInfo.Framework "fiber") }}
func Response(c *fiber.Ctx, status int,data interface{}, message string) error {
	return c.Status(status).JSON(&Res{
		Status:  status,
		Message: message,
		Data:    data,
	})
}

func ResponseWithPagination(c *fiber.Ctx, status int,data interface{}, message string, links PaginationLinks) error {
	return c.Status(status).JSON(&ResWithPagination{
		Res: Res{
			Status:  status,
			Message: message,
			Data:    data,
		},
		Links: PaginationLinks{
			Prev: links.Prev,
			Next: links.Next,
		},
	})
}
{{- end }}







{{- if ( eq .ProjectInfo.Framework "echo") }}
func Response(c echo.Context, status int, data interface{}, message string) error {
	return c.JSON(status, &Res{
		Status:  status,
		Message: message,
		Data:    data,
	})
}

func ResponseWithPagination(c echo.Context, status int, data interface{}, message string, links PaginationLinks) error {
	return c.JSON(status, &ResWithPagination{
		Res: Res{
			Status:  status,
			Message: message,
			Data:    data,
		},
		Links: PaginationLinks{
			Prev: links.Prev,
			Next: links.Next,
		},
	})
}
{{- end }}







{{- if ( eq .ProjectInfo.Framework "chi") }}
func Response(w http.ResponseWriter, status int, data interface{}, message string) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)

	return json.NewEncoder(w).Encode(&Res{
		Status:  status,
		Message: message,
		Data:    data,
	})
}

func ResponseWithPagination(w http.ResponseWriter, status int, data interface{}, message string, links PaginationLinks) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)

	return json.NewEncoder(w).Encode(&ResWithPagination{
		Res: Res{
			Status:  status,
			Message: message,
			Data:    data,
		},
		Links: PaginationLinks{
			Prev: links.Prev,
			Next: links.Next,
		},
	})
}
{{- end }}






// return the full error message only during debug
func DbErrorMessage(err error) string {
	if settings.DEBUG_MODE == "true" {
		return fmt.Sprintln(FailedDbConnMessage, err.Error())
	}
	return fmt.Sprintln(FailedDbConnMessage)
}
