{{ $go_version      := .ProjectInfo.GoVersion -}}
{{ $project_name    := .ProjectInfo.Name -}}
// Server generated by gomarvin, {{ .ProjectInfo.GomarvinVersion}}
package main

import (
	"{{$project_name}}/router"
	"{{$project_name}}/settings"
	"{{$project_name}}/settings/database"
	"fmt"
	"strconv"

	{{- if ( eq .ProjectInfo.Framework "gin") }}
	"github.com/gin-gonic/gin"
	{{ end }}

	{{- if ( eq .ProjectInfo.Framework "fiber") }}
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/helmet/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	{{ end }}


	{{- if ( eq .ProjectInfo.Framework "echo") }}
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	{{ end }}
)


func main() {

	database.Connect()		// get db connection
	port, _ := strconv.Atoi(settings.Config("GOLANG_PORT")) 	// import the .env int
	address := fmt.Sprintf("localhost:%d", port)


	{{- if ( eq .ProjectInfo.Framework "gin") }}
	app := gin.Default() 	// create the server
	app.Run(address)               	// run the server
	{{- end }}


	{{- if ( eq .ProjectInfo.Framework "fiber") }}
	app := fiber.New()    	// create the server
	app.Use(logger.New()) 	// logs the requests
	app.Use(cors.New())		// allow fetch from frontend
	app.Use(helmet.New()) 	// security headers
	app.Listen(address)			// run the server
	{{- end }}


	{{- if ( eq .ProjectInfo.Framework "echo") }}
	app := echo.New()				// create the server
	app.Use(middleware.Logger())	// logs the requests
	app.Use(middleware.Recover())
	app.Use(middleware.CORS())		// allow fetch from frontend
	app.Logger.Fatal(app.Start(address))
	{{- end }}

	router.Endpoints(app) 	// use endpoints
}