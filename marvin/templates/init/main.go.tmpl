{{ $go_version      := .ProjectInfo.GoVersion -}}
{{ $project_name    := .ProjectInfo.Name -}}
// Server generated by gomarvin, {{ ConvertLastCharTo .ProjectInfo.GomarvinVersion "x" }}
// Repo : https://github.com/tompston/gomarvin
// Docs : https://gomarvin.pages.dev/docs

package main

import (
	"{{$project_name}}/pkg/settings"
	"{{$project_name}}/pkg/settings/database"
	"{{$project_name}}/pkg/server"
	"fmt"
	"log"

	{{- if ( eq .ProjectInfo.Framework "chi") }}
	"net/http"
	{{ end }}
)


// setup the environment for the go app on the initialization:
//   - read .env config file and store it in settings.Environment variable
//   - store db connection in the database.dbConn variable
func setupEnvironmet() error {
	if err := settings.SetEnvironmentConfig(".env"); err != nil {
		return err
	}

	if err := database.Connect(); err != nil {
		return err
	}

	return nil
}


func main() {

	if err := setupEnvironmet(); err != nil {
		log.Fatal(err)
	}

	address := fmt.Sprintf("localhost:%v", settings.Environment.Backend.Port)
	app := server.Start()

	{{- if ( eq .ProjectInfo.Framework "gin") }}
	app.Run(address) // run the server
	{{- end }}

	{{- if ( eq .ProjectInfo.Framework "fiber") }}
	app.Listen(address) // run the server
	{{- end }}

	{{- if ( eq .ProjectInfo.Framework "echo") }}
	app.Logger.Fatal(app.Start(address)) // run the server
	{{- end }}

	{{- if ( eq .ProjectInfo.Framework "chi") }}
	http.ListenAndServe(address, app) // run the server
	{{- end }}
	
}