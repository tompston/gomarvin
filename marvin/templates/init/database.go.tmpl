{{ $project_name    := .ProjectInfo.Name -}}

package database

import (
	"database/sql"
	"fmt"

	{{ if ( eq .ProjectInfo.DbType "mysql")		}}_ "github.com/go-sql-driver/mysql"{{ end }}
	{{ if ( eq .ProjectInfo.DbType "sqlite") 	}}_ "github.com/mattn/go-sqlite3"{{ end }}
	{{ if ( eq .ProjectInfo.DbType "postgres")	}}_ "github.com/lib/pq" {{ end }}
)


{{- if ( eq .ProjectInfo.DbType "mysql") }}
// DsnString returns a string that is used to connect to the database
func DsnString(user, pass, name string) string {
	return fmt.Sprintf("%s:%s@/%s", user, pass, name)
}
{{ end }}


{{- if ( eq .ProjectInfo.DbType "postgres") }}
// DsnString returns a string that is used to connect to the database
func DsnString(host, user, pass, name string, port int, ssl, timezone string) string {
	dsn := fmt.Sprintf(
		"host=%s user=%s password=%s dbname=%s port=%v sslmode=%s TimeZone=%s",
		host, user, pass, name, port, ssl, timezone)
	return dsn
}
{{ end }}



// NewDbConn create and returns a new database connection.
// 
// Example:
// 	db, err := database.NewDbConn(dsn_string)
// 	if err != nil {
//		fmt.Println(err) 
//	}
//	defer db.Close()
func NewDbConn(dsn_string string) (*sql.DB, error) {
	{{- if ( eq .ProjectInfo.DbType "postgres")}}db, err := sql.Open("postgres", dsn_string) {{ end }}
	{{- if ( eq .ProjectInfo.DbType "sqlite")}}db, err := sql.Open("sqlite3", dsn_string) {{ end }}
	{{- if ( eq .ProjectInfo.DbType "mysql")}}db, err := sql.Open("mysql", dsn_string){{ end }}
	if err != nil {
		return nil, err
	}

	if err := db.Ping(); err != nil {
        return nil, fmt.Errorf("error pinging database: %v", err)
    }

	return db, err
}