{{ $project_name    := .ProjectInfo.Name -}}

package database

import (
	"database/sql"
	"fmt"

	{{ if ( eq .ProjectInfo.DbType "sqlite") }}
	_ "github.com/mattn/go-sqlite3"
	{{ end }}


	{{ if ( eq .ProjectInfo.DbType "postgres")}}
	"{{$project_name}}/settings"
	 _ "github.com/lib/pq" 	
	{{ end }}


	{{ if ( eq .ProjectInfo.DbType "mysql")}}
	"{{$project_name}}/settings"
	_ "github.com/go-sql-driver/mysql"
	{{ end }}
)

// dbConn variable holds the connection to the database,
// if the Connect function is executed.
var dbConn *sql.DB


{{- if ( eq .ProjectInfo.DbType "mysql") }}
// create the dsn string from variables that are specified in the .env file
func DsnString() string {
	
	db := settings.Environment.Database

	dsn := fmt.Sprintf("%s:%s@/%s", 
		db.User,
		db.Pass, 
		db.Name)
	return dsn
	
}
{{ end }}





{{- if ( eq .ProjectInfo.DbType "postgres") }}
// create the dsn string from variables that are specified in the .env file
func DsnString() string {

	db := settings.Environment.Database

	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%v sslmode=%s TimeZone=%s", 
		db.Host,
		db.User,
		db.Pass,
		db.Name,
		db.Port,
		db.SSL,
		db.Timezone)

	return dsn
}
{{ end }}



// GetDbConn creates a database connection without using the global db variable.
// 
// Example:
// 	db, err := database.GetDbConn()
// 	if err != nil {
//		fmt.Println(err) 
//	}
//	defer db.Close()
func GetDbConn() (*sql.DB, error) {

	{{ if ( eq .ProjectInfo.DbType "postgres")}}db, err := sql.Open("postgres", DsnString()) {{ end }}
	{{ if ( eq .ProjectInfo.DbType "sqlite")}}db, err := sql.Open("sqlite3", "test.db") {{ end }}
	{{ if ( eq .ProjectInfo.DbType "mysql")}}db, err := sql.Open("mysql", DsnString()){{ end }}

	if err != nil {
		return nil, err
	}
	return db, err
}

// Connect function connects to the database, and sets the
// database.dbConn variable to hold the connection to the db.
func Connect() error {

	{{- if ( eq .ProjectInfo.DbType "postgres")}}db, err := sql.Open("postgres", DsnString()){{- end }}
	{{- if ( eq .ProjectInfo.DbType "sqlite")}}db, err := sql.Open("sqlite3", "test.db"){{- end }}
	{{- if ( eq .ProjectInfo.DbType "mysql")}}db, err := sql.Open("mysql", DsnString()){{- end }}
	if err != nil {
		return err
	}

	// Ping the database to verify the connection
    err = db.Ping()
    if err != nil {
        return fmt.Errorf("error pinging database: %v", err)
    }

	// assign *sql.DB to the global variable
	dbConn = db

	return nil
}


// GetDB returns a database connection that is initialized
// when the app is started
func GetDB() *sql.DB {
    return dbConn
}