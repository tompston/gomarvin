{{ $project_name    := .ProjectInfo.Name -}}

package database

import (
	"database/sql"

	{{ if ( eq .ProjectInfo.DbType "sqlite") }}
	_ "github.com/mattn/go-sqlite3"
	{{ end }}


	{{ if ( eq .ProjectInfo.DbType "postgres")}}
	"{{$project_name}}/settings"
	 _ "github.com/lib/pq" 	
	"fmt"
	{{ end }}


	{{ if ( eq .ProjectInfo.DbType "mysql")}}
	"{{$project_name}}/settings"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	{{ end }}
)

// DB variable holds the connection to the database,
// if the Connect function is executed.
var DB *sql.DB


{{- if ( eq .ProjectInfo.DbType "mysql") }}
// create the dsn string from variables that are specified in the .env file
func DsnString() string {
	
	dsn := fmt.Sprintf("%s:%s@/%s", 
		settings.DB_USER,
		settings.DB_PASS, 
		settings.DB_NAME)
	return dsn
	
}
{{ end }}





{{- if ( eq .ProjectInfo.DbType "postgres") }}
// create the dsn string from variables that are specified in the .env file
func DsnString() string {

	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=%s TimeZone=%s", 
				settings.DB_HOST, 
				settings.DB_USER, 
				settings.DB_PASS, 
				settings.DB_NAME, 
				settings.DB_PORT, 
				settings.DB_SSL, 
				settings.DB_TZ)
	return dsn
}
{{ end }}



// GetDbConn creates a database connection without using the global db variable.
// 
// Example:
// 	db, err := database.GetDbConn()
// 	if err != nil {
//		fmt.Println(err) 
//	}
//	defer db.Close()
func GetDbConn() (*sql.DB, error) {

	{{ if ( eq .ProjectInfo.DbType "postgres")}}db, err := sql.Open("postgres", DsnString()) {{ end }}
	{{ if ( eq .ProjectInfo.DbType "sqlite")}}db, err := sql.Open("sqlite3", "test.db") {{ end }}
	{{ if ( eq .ProjectInfo.DbType "mysql")}}db, err := sql.Open("mysql", DsnString()){{ end }}

	if err != nil {
		panic(err)
	}
	return db, err
}

// Connect function connects to the database, and sets the
// database.DB variable to hold the connection to the db.
func Connect() {

	{{ if ( eq .ProjectInfo.DbType "postgres")}}db, err := sql.Open("postgres", DsnString()){{ end }}
	{{ if ( eq .ProjectInfo.DbType "sqlite")}}db, err := sql.Open("sqlite3", "test.db"){{ end }}
	{{ if ( eq .ProjectInfo.DbType "mysql")}}db, err := sql.Open("mysql", DsnString()){{ end }}

	if err != nil {
		panic(err)
	}

	// assign *sql.DB to the global variable
	DB = db
}