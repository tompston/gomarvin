{{ $project_name    := .ProjectInfo.Name -}}

package settings

import (
	"fmt"
	"os"

    "{{$project_name}}/lib/convert"
	"github.com/joho/godotenv"
)

// env config file struct
type EnvConfig struct {
	Backend
	Database
}

// env backend settings
type Backend struct {
	FrontendURL string
	HostURL     string
	Port        int
	APIPath     string
	DebugMode   bool
}

// env database settings
type Database struct {
	Host     string
	User     string
	Pass     string
	Name     string
	SSL      string
	Timezone string
	Port     int
}

func SetEnvironmentConfig(env_path string) error {
	if err := godotenv.Load(env_path); err != nil {
		return fmt.Errorf("error loading .env file, %v", err)
	}

	backend_port, err := convert.StringToInt(os.Getenv("GO_BACKEND_PORT"))
	if err != nil {
		return err
	}

	debug_mode, err := convert.StringToBool(os.Getenv("DEBUG_MODE"))
	if err != nil {
		return err
	}

	db_port, err := convert.StringToInt(os.Getenv("DB_PORT"))
	if err != nil {
		return err
	}

	env := EnvConfig{
		Backend{
			FrontendURL: os.Getenv("FRONTEND_URL"),
			HostURL:     os.Getenv("HOST_URL"),
			Port:        backend_port,
			APIPath:     os.Getenv("API_PATH"),
			DebugMode:   debug_mode,
		},
		Database{
			Host:     os.Getenv("DB_HOST"),
			User:     os.Getenv("DB_USER"),
			Pass:     os.Getenv("DB_PASS"),
			Name:     os.Getenv("DB_NAME"),
			SSL:      os.Getenv("DB_SSL"),
			Timezone: os.Getenv("DB_TZ"),
			Port:     db_port,
		},
	}

	Environment = env

	return nil
}
