{{ $project_name    := .ProjectInfo.Name -}}
// Package app groups all of the application's environment configuration and
// database connection dependencies and provides a single entry point for
// initializing the application.
package app

import (
	"context"
	"database/sql"
	"{{ $project_name }}/pkg/cli"
	"{{ $project_name }}/pkg/settings"
	"{{ $project_name }}/pkg/settings/database"
	"fmt"
)

// App is the application struct which contains the environment configuration
// and the database connection.
type App struct {
	conf *settings.EnvConfig // conf is the environment configuration
	db   *sql.DB			 // db is the database connection
}

// Conf returns the environment configuration.
func (a *App) Conf() *settings.EnvConfig {
	return a.conf
}

// Db returns the database connection.
func (a *App) Db() *sql.DB {
	return a.db
}

// NewApp setups the environment for the go app on the initialization 
// and returns the App struct which contains the read environment 
// configuration and the database connection.
// 
// Example: 
//
// 	app, err := app.NewApp(context.Background())
// 	if err != nil {
// 		log.Fatal(err)
// 	}
// 	defer app.Exit(context.Background())
func NewApp(ctx context.Context, cliArgs ...cli.Args) (*App, error) {
	args := cli.NewArgs(cliArgs...)

	conf, err := settings.NewEnvConfig(args.Conf)
	if err != nil {
		return nil, fmt.Errorf("error loading .env file, %v", err)
	}


	{{ if ( eq .ProjectInfo.DbType "postgres") }}
	db_conf := conf.Database
	dsn_string := database.DsnString(db_conf.Host, db_conf.User, db_conf.Pass, db_conf.Name, db_conf.Port, db_conf.SSL, db_conf.Timezone)
	db, err := database.NewDbConn(dsn_string)
	if err != nil {
		return nil, fmt.Errorf("error creating database connection, %v", err)
	}
	{{ end }}


	{{ if ( eq .ProjectInfo.DbType "mysql") }}
	db_conf := conf.Database
	dsn_string := database.DsnString(db_conf.User, db_conf.Pass, db_conf.Name)
	db, err := database.NewDbConn(dsn_string)
	if err != nil {
		return nil, fmt.Errorf("error creating database connection, %v", err)
	}
	{{ end }}


	{{ if ( eq .ProjectInfo.DbType "sqlite") }}
	db_conf := conf.Database
	dsn_string := database.DsnString("test.db")
	db, err := database.NewDbConn(dsn_string)
	if err != nil {
		return nil, fmt.Errorf("error creating database connection, %v", err)
	}
	{{ end }}

	return &App{conf, db}, nil
}

// Exit function groups all the exit functions of the app (e.g. closing the database connection)
// and returns an error if any of the exit functions fail.
func (a *App) Exit(ctx context.Context) error {
	// Close the database connection
	if err := a.Db().Close(); err != nil {
		return fmt.Errorf("failed to close db conn: %v", err)
	}
	return nil
}
