{{ $go_version      := .ProjectInfo.GoVersion -}}
{{ $project_name    := .ProjectInfo.Name -}}
package server

import (

	{{- if ( eq .ProjectInfo.Framework "gin") }}
	"github.com/gin-gonic/gin"
	{{ end }}

	{{- if ( eq .ProjectInfo.Framework "fiber") }}
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/helmet/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	{{ end }}


	{{- if ( eq .ProjectInfo.Framework "echo") }}
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	{{ end }}


	{{- if ( eq .ProjectInfo.Framework "chi") }}
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/cors"
    "net/http"
	{{ end }}

    "{{$project_name}}/pkg/app"
    "fmt"
)


type server struct {
	app *app.App
}

func NewServer(app *app.App) *server {
	return &server{app}
}


{{- if ( eq .ProjectInfo.Framework "gin") }}

func (s *server) Start() {
    server := gin.Default() 	// create the server
    Router(server) 	// use endpoints
    
    conf := s.app.Conf()
    address := fmt.Sprintf("%v:%v", conf.Backend.Host, conf.Backend.Port)
    server.Run(address)
}

{{- end }}



{{- if ( eq .ProjectInfo.Framework "echo") }}
func (s *server) Start() {
    server := echo.New()				// create the server

    server.Use(
        middleware.Logger(),        // logs the requests
        middleware.Recover(),       // 
        middleware.CORS(),          // allow fetch from frontend
    )

    Router(server) 	// use endpoints

    conf := s.app.Conf()
    address := fmt.Sprintf("%v:%v", conf.Backend.Host, conf.Backend.Port)
    server.Logger.Fatal(server.Start(address))
}

{{ end }}





{{- if ( eq .ProjectInfo.Framework "fiber") }}
func (s *server) Start() {
    server := fiber.New()    	// create the server

    server.Use(
        logger.New(),       // logs the requests
        cors.New(),         // allow fetch from frontend
        helmet.New(),       // security headers
    )

    Router(server) 	        // use endpoints

    conf := s.app.Conf()
    address := fmt.Sprintf("%v:%v", conf.Backend.Host, conf.Backend.Port)
    server.Listen(address)
}

{{- end }}



{{- if ( eq .ProjectInfo.Framework "chi") }}

func (s *server) Start() {
    server := chi.NewRouter()

    server.Use(
        middleware.Logger, 
        middleware.Recoverer,
        middleware.AllowContentType("application/json"),
        middleware.ContentCharset("UTF-8", "Latin-1", ""),
        cors.Handler(cors.Options{
            AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
            AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
            MaxAge:           300,
        }),
    )

    Router(server) 	// use endpoints

    conf := s.app.Conf()
    address := fmt.Sprintf("%v:%v", conf.Backend.Host, conf.Backend.Port)
    http.ListenAndServe(address, server)

}
{{- end }}

