{{ $project  	:= .ProjectInfo -}}
{{ $module      := .Modules.Name -}}
{{ $endpoints   := .Modules.Endpoints -}}
// Code generated by gomarvin, {{$project.GomarvinVersion}}. DO NOT EDIT.
// Rename the current file, remove upper comment 
// and replace __ to save changes!

package {{ ConvertToLowercase  $module}}_module

import (
	res "{{$project.Name}}/lib/response"

	{{ if ( eq .ProjectInfo.Framework "gin") }}"github.com/gin-gonic/gin"{{ end }}
	{{ if ( eq .ProjectInfo.Framework "fiber") }}"github.com/gofiber/fiber/v2"{{ end }}
	{{ if ( eq .ProjectInfo.Framework "echo") }}"github.com/labstack/echo/v4"{{ end }}
	{{ if ( eq .ProjectInfo.Framework "chi") }}
	"github.com/go-chi/chi/v5"
	"net/http"
	{{ end }}


	{{/* If an endpoint with an strconv URL Param exists, import the package */ -}}
	{{- range $endpoint := $endpoints -}}
		{{ if $endpoint.URLParams -}}
			{{- range $URL_PARAM := $endpoint.URLParams }}
				{{ if ( eq $URL_PARAM.Type "int") }}
					"strconv"
					{{ break }}
				{{- end -}}
			{{ end }}
		{{ end }}	
	{{ end -}}

	{{/* If there is an endpoint with a body, import the validation package */ -}}
	{{- range $endpoint := $endpoints -}}
		{{ if $endpoint.Body -}}
			"{{$project.Name}}/lib/validate"
			{{ break }}
		{{ end }}	
	{{ end -}}

	{{/* If the current framework is chi and  there is an endpoint with a body, import the json package */ -}}
	{{- if ( eq .ProjectInfo.Framework "chi") -}}
		{{range $endpoint := $endpoints -}}
			{{ if $endpoint.Body -}}
				"encoding/json"
				{{ break }}
			{{ end }}
		{{ end }}
	{{ end -}}
)



{{- if ( eq .ProjectInfo.Framework "chi") }}
	const (
	{{ range $endpoint := $endpoints }}
	__{{ $endpoint.ControllerName}}Url =  "{{ $endpoint.URL }}
		{{- if $endpoint.URLParams -}}
				{{- range $URL_PARAM := $endpoint.URLParams }}/{{ WrapInCurlyBraces $URL_PARAM.Field }}{{- end -}}
		{{- end -}}"
	{{- end }}
	)
{{- end -}}


{{- if or 
	( eq .ProjectInfo.Framework "gin")
	( eq .ProjectInfo.Framework "fiber")
	( eq .ProjectInfo.Framework "echo")
}}
	const (
	{{ range $endpoint := $endpoints }}
	__{{ $endpoint.ControllerName}}Url =  "{{ $endpoint.URL }}
		{{- if $endpoint.URLParams -}}
				{{- range $URL_PARAM := $endpoint.URLParams }}/:{{$URL_PARAM.Field}}{{- end -}}
		{{- end -}}"
	{{- end }}
	)
{{- end -}}








{{- if ( eq .ProjectInfo.Framework "gin") }}

func Router__(app *gin.RouterGroup) {
	{{- range $endpoint := $endpoints }}
	app.{{ $endpoint.Method }}( __{{ $endpoint.ControllerName }}Url , __{{ $endpoint.ControllerName }}){{end}}
}

{{range $endpoint := $endpoints }}
func __{{ $endpoint.ControllerName }}(c *gin.Context) {

	{{ if $endpoint.Body -}} 

	// validate the sent json object
	payload := new({{$endpoint.ControllerName}}Body)

	if err := c.ShouldBindJSON(payload); err != nil {
		res.Response(c, 400, err.Error(), res.FailedJsonValidation)
		return
	}
	if err := validate.ValidateStruct(payload); err != nil {
		res.Response(c, 400, err, res.FailedPayloadValidation)
		return
	}

	{{ end -}}


	{{ if $endpoint.URLParams -}} 
	{{- range $URL_PARAM := $endpoint.URLParams -}}

	{{- if ( eq $URL_PARAM.Type "int") }}
	{{ $URL_PARAM.Field }}, err := strconv.Atoi(c.Param("{{ $URL_PARAM.Field}}"))
	if err != nil {
		res.Response(c, 400, nil, res.ParamIsNotIntMessage)
		return
	}
	_ = {{ $URL_PARAM.Field }}	
	{{ end }}

	{{- if ( eq $URL_PARAM.Type "string") }}
	{{ $URL_PARAM.Field }} := c.Param("{{ $URL_PARAM.Field}}")
	_ = {{ $URL_PARAM.Field }}	
	{{ end }}
	

	{{ end }}
	{{end -}}

	// query goes here


	{{- if ( eq $endpoint.ResponseType "default") }}
	res.Response(c, 200, nil, "")
	{{- end }}

	{{- if ( eq $endpoint.ResponseType "with_pagination") }}
	res.ResponseWithPagination(c, 200, nil, "", res.PaginationLinks{})
	{{- end }}	
}
{{end}}
{{- end }}









{{- if ( eq .ProjectInfo.Framework "fiber") }}

func Router__(app *fiber.App, api fiber.Router) {
        {{- range $endpoint := $endpoints }}
        api.{{ ConvertToLowercaseTitle $endpoint.Method }}( __{{ $endpoint.ControllerName }}Url , __{{ $endpoint.ControllerName }}){{end}}
}

{{range $endpoint := $endpoints }}
func __{{ $endpoint.ControllerName }}(c *fiber.Ctx) error {

	{{ if $endpoint.Body -}} 

	// validate the sent json object
	payload := new({{$endpoint.ControllerName}}Body)

	if err := c.BodyParser(payload); err != nil {
		return res.Response(c, 400, err.Error(), res.FailedJsonValidation)
	}
	if err := validate.ValidateStruct(payload); err != nil {
		return res.Response(c, 400, err, res.FailedPayloadValidation)
	}

	{{ end -}}


	{{ if $endpoint.URLParams -}} 
	{{- range $URL_PARAM := $endpoint.URLParams -}}

	{{- if ( eq $URL_PARAM.Type "int") }}
	{{ $URL_PARAM.Field }}, err := strconv.Atoi(c.Params("{{ $URL_PARAM.Field}}"))
	if err != nil {
		return res.Response(c, 400, nil, res.ParamIsNotIntMessage)
	}
	_ = {{ $URL_PARAM.Field }}
	{{ end }}

	{{- if ( eq $URL_PARAM.Type "string") }}
	{{ $URL_PARAM.Field }} := c.Params("{{ $URL_PARAM.Field}}")
	_ = {{ $URL_PARAM.Field }}
	{{ end }}

	{{end}}
	{{end -}}
	
	// query goes here


	{{- if ( eq $endpoint.ResponseType "default") }}
	return res.Response(c, 200, nil, "")
	{{- end }}

	{{- if ( eq $endpoint.ResponseType "with_pagination") }}
	return res.ResponseWithPagination(c, 200, nil, "", res.PaginationLinks{})
	{{- end }}
}
{{ end }}
{{- end }}











{{- if ( eq .ProjectInfo.Framework "echo") }}

func Router__(app *echo.Group) {
	{{- range $endpoint := $endpoints }}
	app.{{ ConvertToUppercase $endpoint.Method }}( __{{ $endpoint.ControllerName }}Url , __{{ $endpoint.ControllerName }}){{end}}
}

{{range $endpoint := $endpoints }}
func __{{ $endpoint.ControllerName }}(c echo.Context) error {

	{{ if $endpoint.Body -}} 
	
	// validate the sent json object
	payload := new({{$endpoint.ControllerName}}Body)

	if err := c.Bind(payload); err != nil {
		return res.Response(c, 400, err.Error(), res.FailedJsonValidation)
	}
	if err := validate.ValidateStruct(payload); err != nil {
		return res.Response(c, 400, err, res.FailedPayloadValidation)
	}
	
	{{ end -}}

	{{ if $endpoint.URLParams -}} 
	{{- range $URL_PARAM := $endpoint.URLParams -}}

	{{- if ( eq $URL_PARAM.Type "int") }}
	{{ $URL_PARAM.Field }}, err := strconv.Atoi(c.Param("{{ $URL_PARAM.Field}}"))
	if err != nil {
		return res.Response(c, 400, nil, res.ParamIsNotIntMessage)
	}
	_ = {{ $URL_PARAM.Field }}	
	{{ end }}

	{{- if ( eq $URL_PARAM.Type "string") }}
	{{ $URL_PARAM.Field }} := c.Param("{{ $URL_PARAM.Field}}")
	_ = {{ $URL_PARAM.Field }}	
	{{ end }}
	

	{{ end }}
	{{end -}}
	
	// query goes here

	{{- if ( eq $endpoint.ResponseType "default") }}
	return res.Response(c, 200, nil, "")
	{{- end }}

	{{- if ( eq $endpoint.ResponseType "with_pagination") }}
	return res.ResponseWithPagination(c, 200, nil, "", res.PaginationLinks{})
	{{- end }}
}
{{ end }}
{{- end }}









{{- if ( eq .ProjectInfo.Framework "chi") }}

func Router__(api *chi.Mux) {
	{{- range $endpoint := $endpoints }}
	api.{{ ConvertToLowercaseTitle $endpoint.Method }}( __{{ $endpoint.ControllerName }}Url , __{{ $endpoint.ControllerName }}){{end}}
}

{{range $endpoint := $endpoints }}
func __{{ $endpoint.ControllerName }}(w http.ResponseWriter, r *http.Request) {

	{{ if $endpoint.Body -}} 

	// validate the sent json object
	payload := new({{$endpoint.ControllerName}}Body)

	if err := json.NewDecoder(r.Body).Decode(payload); err != nil {
		res.Response(w, 400, err.Error(), res.FailedJsonValidation)
		return
	}
	if err := validate.ValidateStruct(payload); err != nil {
		res.Response(w, 400, err, res.FailedPayloadValidation)
		return
	}
	
	{{ end -}}

	{{ if $endpoint.URLParams -}} 
	{{- range $URL_PARAM := $endpoint.URLParams -}}

	{{- if ( eq $URL_PARAM.Type "int") }}
	{{ $URL_PARAM.Field }}, err := strconv.Atoi(chi.URLParam(r, "{{ $URL_PARAM.Field}}"))
	if err != nil {
		res.Response(w, 400, nil, res.ParamIsNotIntMessage)
		return
	}
	_ = {{ $URL_PARAM.Field }}	
	{{ end }}

	{{- if ( eq $URL_PARAM.Type "string") }}
	{{ $URL_PARAM.Field }} := chi.URLParam(r, "{{ $URL_PARAM.Field}}")
	_ = {{ $URL_PARAM.Field }}	
	{{ end }}
	

	{{ end }}
	{{end -}}
	
	// query goes here


	{{- if ( eq $endpoint.ResponseType "default") }}
	res.Response(w, 200, nil, "")
	{{- end }}

	{{- if ( eq $endpoint.ResponseType "with_pagination") }}
	res.ResponseWithPagination(w, 200, nil, "", res.PaginationLinks{})
	{{- end }}
}
{{ end }}
{{- end }}