{{ $project  	:= .ProjectInfo -}}
{{ $module      := .Modules.Name -}}
{{ $endpoints   := .Modules.Endpoints -}}
// Rename the current file and repalce __ to save changes !

package {{ ConvertToLowercase  $module}}_module

import (
	res "{{$project.Name}}/utils/response"
	"{{$project.Name}}/utils/validate"
	"{{$project.Name}}/settings/database"
	"strconv"
	"time"
	"encoding/json"

	{{ if ( eq .ProjectInfo.Framework "gin") }}"github.com/gin-gonic/gin"{{ end }}
	{{ if ( eq .ProjectInfo.Framework "fiber") }}"github.com/gofiber/fiber/v2"{{ end }}
	{{ if ( eq .ProjectInfo.Framework "echo") }}"github.com/labstack/echo/v4"{{ end }}

	{{ if ( eq .ProjectInfo.Framework "chi") }}
	"github.com/go-chi/chi/v5"
	"net/http"
	{{ end }}
)

var data = ""

// remove import errors
var _ = func() {
	var _ = strconv.IntSize
	var _ = validate.NewValidator
	var _ = time.August
	var _ = database.DB
	var _ = json.RawMessage("")
}

// uncomment lower line to call generated sqlc functions with db connection
// var Queries = sqlc.New(database.DB)

{{- if ( eq .ProjectInfo.Framework "chi") }}
	const (
	{{ range $endpoint := $endpoints }}
	__{{ $endpoint.ControllerName}}Url =  "{{ $endpoint.URL }}
		{{- if $endpoint.URLParams -}}
				{{- range $URL_PARAM := $endpoint.URLParams }}/{ {{$URL_PARAM.Field}} }{{- end -}}
		{{- end -}}"
	{{- end }}
	)
{{- end -}}


{{- if or 
	( eq .ProjectInfo.Framework "gin")
	( eq .ProjectInfo.Framework "fiber")
	( eq .ProjectInfo.Framework "echo")
}}
	const (
	{{ range $endpoint := $endpoints }}
	__{{ $endpoint.ControllerName}}Url =  "{{ $endpoint.URL }}
		{{- if $endpoint.URLParams -}}
				{{- range $URL_PARAM := $endpoint.URLParams }}/:{{$URL_PARAM.Field}}{{- end -}}
		{{- end -}}"
	{{- end }}
	)
{{- end -}}



{{ range $endpoint := $endpoints }}
{{ if $endpoint.Body -}} 
type __{{$endpoint.ControllerName}}Body struct {
	{{- range $body_field := $endpoint.Body }}
	{{ ConvertToCamelCase $body_field.Field }}  	{{ $body_field.Type }} 	`json:"{{$body_field.Field}}" validate:"{{$body_field.Validate}}"`
{{- end }}
}
{{ end -}}
{{ end }}







{{- if ( eq .ProjectInfo.Framework "gin") }}

func Router__(app *gin.RouterGroup) {
	{{- range $endpoint := $endpoints }}
	app.{{ $endpoint.Method }}( __{{ $endpoint.ControllerName }}Url , __{{ $endpoint.ControllerName }}){{end}}
}

{{range $endpoint := $endpoints }}
func __{{ $endpoint.ControllerName }}(c *gin.Context) {

	{{ if $endpoint.Body -}} 
	// validate the sent json object
	payload := new(__{{$endpoint.ControllerName}}Body)
	if err := c.ShouldBindJSON(payload); err != nil {
		res.Response(c, 400, err.Error(), res.FailedJsonValidation)
		return
	}
	if err := validate.ValidateStruct(payload); err != nil {
		res.Response(c, 400, err, res.FailedPayloadValidation)
		return
	}
	
	{{ end -}}

	{{ if $endpoint.URLParams -}} 
	{{- range $URL_PARAM := $endpoint.URLParams -}}

	{{/* if the URLParams is string  */ -}}
	{{- if ( eq $URL_PARAM.Type "int") }}
	{{ $URL_PARAM.Field }}, err := strconv.Atoi(c.Param("{{ $URL_PARAM.Field}}"))
	if err != nil {
		res.Response(c, 400, nil, res.ParamIsNotIntMessage)
		return
	}
	_ = {{ $URL_PARAM.Field }}	
	{{ end }}

	{{- if ( eq $URL_PARAM.Type "string") }}
	{{ $URL_PARAM.Field }} := c.Param("{{ $URL_PARAM.Field}}")
	_ = {{ $URL_PARAM.Field }}	
	{{ end }}
	


	{{end}}
	{{end -}}

	// query goes here

	res.Response(c, 200, data, "")
}
{{end}}
{{- end }}









{{- if ( eq .ProjectInfo.Framework "fiber") }}

func Router__(app *fiber.App, api fiber.Router) {
        {{- range $endpoint := $endpoints }}
        api.{{ ConvertToLowercaseTitle $endpoint.Method }}( __{{ $endpoint.ControllerName }}Url , __{{ $endpoint.ControllerName }}){{end}}
}

{{range $endpoint := $endpoints }}
func __{{ $endpoint.ControllerName }}(c *fiber.Ctx) error {

	{{ if $endpoint.Body -}} 
	// validate the sent json object
	payload := new(__{{$endpoint.ControllerName}}Body)
	if err := c.BodyParser(payload); err != nil {
		return res.Response(c, 400, err.Error(), res.FailedJsonValidation)
	}
	if err := validate.ValidateStruct(payload); err != nil {
		return res.Response(c, 400, err, res.FailedPayloadValidation)
	}
	
	{{ end -}}

	{{ if $endpoint.URLParams -}} 
	{{- range $URL_PARAM := $endpoint.URLParams -}}

	{{- if ( eq $URL_PARAM.Type "int") }}
	{{ $URL_PARAM.Field }}, err := strconv.Atoi(c.Params("{{ $URL_PARAM.Field}}"))
	if err != nil {
		return res.Response(c, 400, nil, res.ParamIsNotIntMessage)
	}
	_ = {{ $URL_PARAM.Field }}
	{{ end }}

	{{- if ( eq $URL_PARAM.Type "string") }}
	{{ $URL_PARAM.Field }} := c.Params("{{ $URL_PARAM.Field}}")
	_ = {{ $URL_PARAM.Field }}
	{{ end }}

	{{end}}
	{{end -}}
	
	// query goes here

	return res.Response(c, 200, data, "")
}
{{ end }}
{{- end }}











{{- if ( eq .ProjectInfo.Framework "echo") }}

func Router__(app *echo.Group) {
	{{- range $endpoint := $endpoints }}
	app.{{ ConvertToUppercase $endpoint.Method }}( __{{ $endpoint.ControllerName }}Url , __{{ $endpoint.ControllerName }}){{end}}
}

{{range $endpoint := $endpoints }}
func __{{ $endpoint.ControllerName }}(c echo.Context) error {

	{{ if $endpoint.Body -}} 
	// validate the sent json object
	payload := new(__{{$endpoint.ControllerName}}Body)
	if err := c.Bind(payload); err != nil {
		return res.Response(c, 400, err.Error(), res.FailedJsonValidation)
	}
	if err := validate.ValidateStruct(payload); err != nil {
		return res.Response(c, 400, err, res.FailedPayloadValidation)
	}
	
	{{ end -}}

	{{ if $endpoint.URLParams -}} 
	{{- range $URL_PARAM := $endpoint.URLParams -}}

	{{- if ( eq $URL_PARAM.Type "int") }}
	{{ $URL_PARAM.Field }}, err := strconv.Atoi(c.Param("{{ $URL_PARAM.Field}}"))
	if err != nil {
		return res.Response(c, 400, nil, res.ParamIsNotIntMessage)
	}
	_ = {{ $URL_PARAM.Field }}	
	{{ end }}

	{{- if ( eq $URL_PARAM.Type "string") }}
	{{ $URL_PARAM.Field }} := c.Param("{{ $URL_PARAM.Field}}")
	_ = {{ $URL_PARAM.Field }}	
	{{ end }}
	

	{{ end }}
	{{end -}}
	
	// query goes here

	return res.Response(c, 200, data, "")
}
{{end}}
{{- end }}









{{- if ( eq .ProjectInfo.Framework "chi") }}

func Router__(api *chi.Mux) {
	{{- range $endpoint := $endpoints }}
	api.{{ ConvertToLowercaseTitle $endpoint.Method }}( __{{ $endpoint.ControllerName }}Url , __{{ $endpoint.ControllerName }}){{end}}
}

{{range $endpoint := $endpoints }}
func __{{ $endpoint.ControllerName }}(w http.ResponseWriter, r *http.Request) {

	w.Header().Set("Content-Type", "application/json; charset=utf-8")

	{{ if $endpoint.Body -}} 
	// validate the sent json object
	payload := new(__{{$endpoint.ControllerName}}Body)
	if err := json.NewDecoder(r.Body).Decode(payload); err != nil {
		res.Response(w, 400, err.Error(), res.FailedJsonValidation)
		return
	}
	if err := validate.ValidateStruct(payload); err != nil {
		res.Response(w, 400, err, res.FailedPayloadValidation)
		return
	}
	
	{{ end -}}

	{{ if $endpoint.URLParams -}} 
	{{- range $URL_PARAM := $endpoint.URLParams -}}

	{{- if ( eq $URL_PARAM.Type "int") }}
	{{ $URL_PARAM.Field }}, err := strconv.Atoi(chi.URLParam(r, "{{ $URL_PARAM.Field}}"))
	if err != nil {
		res.Response(w, 400, nil, res.ParamIsNotIntMessage)
		return
	}
	_ = {{ $URL_PARAM.Field }}	
	{{ end }}

	{{- if ( eq $URL_PARAM.Type "string") }}
	{{ $URL_PARAM.Field }} := chi.URLParam(r, "{{ $URL_PARAM.Field}}")
	_ = {{ $URL_PARAM.Field }}	
	{{ end }}
	

	{{ end }}
	{{end -}}
	
	// query goes here

	res.Response(w, 200, data, "")
}
{{end}}
{{- end }}